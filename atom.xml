<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[akadama]]></title>
  <link href="http://chiastolite.github.io/atom.xml" rel="self"/>
  <link href="http://chiastolite.github.io/"/>
  <updated>2013-07-14T12:29:53+09:00</updated>
  <id>http://chiastolite.github.io/</id>
  <author>
    <name><![CDATA[Hiroyuki MORITA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vagrant meetupに行ってきた]]></title>
    <link href="http://chiastolite.github.io/blog/2013/07/13/vagrant-meetup/"/>
    <updated>2013-07-13T13:38:00+09:00</updated>
    <id>http://chiastolite.github.io/blog/2013/07/13/vagrant-meetup</id>
    <content type="html"><![CDATA[<p><a href="http://chef-meetup.doorkeeper.jp/events/4624">Vagrant meetup 〜作者 Hashimoto氏の来日講演〜 - Chef Meetup | Doorkeeper</a></p>

<p>作者の @mitchellh さんが来日するとのことで、これ逃すと直接話を聞けるチャンスはないと思い参加してきました。</p>

<p>@mitchellh さんは写真とかでもわかる通りイケメンすぎてやばすぎ。<br>
話はVagrantを使うことによるメリットや今後の展望、おまけでPackerの話など。</p>

<p>簡単に話のまとめ</p>

<h2>Vagrantの思想</h2>

<p>&quot;最高の開発フロー&quot;の提供</p>

<h2>Vagrant利用のメリット</h2>

<ul>
<li>開発/テスト/本番を同じOSで動かせる

<ul>
<li>OSXは本番環境では使わないよね？</li>
</ul></li>
<li>開発者間での環境の差異を無くせる

<ul>
<li>構築の時間削減</li>
<li>手順書のメンテナンスやヒューマンエラーもない</li>
</ul></li>
<li>再構築が簡単なので気軽に今の環境を捨てられる</li>
<li>仮想マシンへの接続が簡単

<ul>
<li>動作/テストをVagrantの中で行って編集はローカルのエディタとかで行える</li>
<li>ポートを開けたりネットワークの設定もできるので使い慣れたブラウザ/デバッガが使える</li>
</ul></li>
<li>プロダクション環境のモデル化が行える

<ul>
<li>multi-machineを使ったクラスタの構築</li>
</ul></li>
</ul>

<h2>今後のVagrant</h2>

<ul>
<li>Boxの構築を自動化(1.3)</li>
<li>Mac/Win(1.3以降)</li>
</ul>

<h2>まとめ</h2>

<p><strong>Use Vagrant</strong><br>
(Vagrant使え)</p>

<hr>

<h2>余談</h2>

<p>「ChefとかでProvisioningしてると、halt -&gt; upで時間食うんだけどどうすれば」って質問しようとしてたらそれっぽいことを質問してる人がいた。ちゃんと聞けてないけどなんかPackerにいい機能があるのかなーって感じなので調べてみよう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotionでユーザーテンプレートを使ってみる]]></title>
    <link href="http://chiastolite.github.io/blog/2013/07/02/rubymotionusertemplate/"/>
    <updated>2013-07-02T23:03:00+09:00</updated>
    <id>http://chiastolite.github.io/blog/2013/07/02/rubymotionusertemplate</id>
    <content type="html"><![CDATA[<p>今日は <a href="http://rubymotion-tokyo.doorkeeper.jp/events/4577">RubyMotionTokyo meetup#2</a> に行ってきました。<br>
あまりやることを決めてなかったのでエディタ周りを調べた後は、<a href="https://github.com/clearsightstudio/ProMotion">ProMotion</a>を試したりソースを読むことに。</p>

<p>便利そうだなと思ったんだけど<code>motion create</code>するたびに毎回Gemfile作って、app_delegate.rbをProMotion用に修正というのはちょっと面倒。<br>
そこで @watson1978 さんにRailsのApplication Templateのような仕組みは無いか聞いてみたところ、
RubyMotionは標準のios,osxのテンプレート以外にも、ユーザーが定義したテンプレートも利用可能とのこと。  </p>

<p>試しにテンプレートを作ってみることにした。</p>

<p>/Library/RubyMotion/lib/motion/project/template.rb を見るとユーザーテンプレートの置き場は ~/Library/RubyMotion/template になっているのでこれを作る。<br>
とりあえず既存のios用テンプレートをコピーしてこのテンプレートが呼べるかを確認。</p>
<div class="highlight"><pre><code class="sh">mkdir -p ~/Library/RubyMotion/template/
<span class="nb">cd</span> ~/Library/RubyMotion/template/
cp -r /Library/RubyMotion/lib/motion/project/template/ios user_template
motion create sample --template<span class="o">=</span>user_template
</code></pre></div>
<p>sampleにテンプレートにiosを使ったときと同じファイルが出来ていることを確認。<br>
次にProMotionを導入してみる。  </p>

<p>と言っても、やるべきはテンプレートのフォルダのfilesにちょっと変更をするだけ。<br>
Gemfileを作って Rakefile、app_delegate.rbにも手を加える。</p>

<ul>
<li>Gemfile</li>
</ul>
<div class="highlight"><pre><code class="ruby"><span class="n">source</span> <span class="s1">&#39;https://rubygems.org&#39;</span>

<span class="n">gem</span> <span class="s1">&#39;rake&#39;</span>
<span class="n">gem</span> <span class="s1">&#39;ProMotion&#39;</span>
</code></pre></div>
<ul>
<li>Rakefile</li>
</ul>
<div class="highlight"><pre><code class="ruby"><span class="c1"># -*- coding: utf-8 -*-</span>
<span class="vg">$:</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="s2">&quot;/Library/RubyMotion/lib&quot;</span><span class="p">)</span>
<span class="nb">require</span> <span class="s1">&#39;motion/project/template/ios&#39;</span>

<span class="nb">require</span> <span class="s1">&#39;bundler&#39;</span>
<span class="no">Bundler</span><span class="o">.</span><span class="n">require</span>

<span class="ss">Motion</span><span class="p">:</span><span class="ss">:Project</span><span class="o">::</span><span class="no">App</span><span class="o">.</span><span class="n">setup</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
  <span class="c1"># Use `rake config&#39; to see complete project settings.</span>
  <span class="n">app</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;&lt;%= name %&gt;&#39;</span>
<span class="k">end</span>
</code></pre></div>
<ul>
<li>app_delegate.rb</li>
</ul>
<div class="highlight"><pre><code class="ruby"><span class="k">class</span> <span class="nc">AppDelegate</span> <span class="o">&lt;</span> <span class="ss">PM</span><span class="p">:</span><span class="ss">:Delegate</span>
  <span class="k">def</span> <span class="nf">on_load</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>bundle installをして再びmotion create。</p>
<div class="highlight"><pre><code class="sh">bundle install
motion create sample --template<span class="o">=</span>user_template
</code></pre></div>
<p>ProMotionが使えるようになってる！<br>
使うライブラリだったりがまとまってきたら、あらかじめテンプレート化することで開発が捗りそうですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vagrant-awsを使う際はuser_dataを設定してみよう]]></title>
    <link href="http://chiastolite.github.io/blog/2013/05/10/vagrant-aws/"/>
    <updated>2013-05-10T02:10:00+09:00</updated>
    <id>http://chiastolite.github.io/blog/2013/05/10/vagrant-aws</id>
    <content type="html"><![CDATA[<p>流行りのVagrantでEC2インスタンスを制御できるvagrant-awsプラグインを使ったときの小ネタ</p>

<p>環境は以下の通り</p>
<div class="highlight"><pre><code class="text">* MacOSX
* Vagrant 1.2.2
* vagrant-aws 0.2.2
* AmazonLinux(ami-173fbf16)
</code></pre></div>
<p>基本的な使い方はid:naoyaさんのブログとかGitHubを参考に。<br>
Vagrantfileの書き方に関してはnaoyaさんが試した時点から、SSH関連の設定方法に変更があったのでGitHubのほうも参照したほうがいいです。</p>

<p><a href="http://d.hatena.ne.jp/naoya/20130315/1363340698">Vagrant 1.1 で EC2 を vagrant up - naoyaのはてなダイアリー</a><br>
<a href="https://github.com/mitchellh/vagrant-aws">mitchellh/vagrant-aws · GitHub</a></p>

<p>で、起動してみると最後に↓こんなエラーがでます。</p>
<div class="highlight"><pre><code class="text">[default] Rsyncing folder: /Users/chiastolite/workspace/vagrant/ec2/ =&gt; /vagrant
The following SSH command responded with a non-zero exit status.
Vagrant assumes that this means the command failed!

mkdir -p &#39;/vagrant&#39;
</code></pre></div>
<p>なんだろ? と思ったら <code>/etc/sudoers</code> で<code>Defaults requiretty</code>が設定されているのがエラーが出ている原因らしい</p>

<p>さて、これをどう直すか? ということなんだけど、sshで入って直すのはVagrant使ってる意味がないなと。
じゃあ、chefで直すか?と思ってもcookbooksのsyncがコケるしそもそもchefが入ってない。
ということでuser_dataを使ってみることにした。</p>

<p>Vagrantfileはこんな感じ</p>
<div class="highlight"><pre><code class="text">Vagrant.configure(&quot;2&quot;) do |config|
  config.vm.box = &quot;dummy&quot;

  config.vm.provider :aws do |aws, override|
    # 中略

    # sedでrequitettyのとこをコメントアウト
    aws.user_data = &lt;&lt;-USER_DATA
#!/bin/sh
sed -i -e &#39;s/^\\(Defaults.*requiretty\\)/#\\1/&#39; /etc/sudoers
    USER_DATA
  end
end
</code></pre></div>
<p>設定は<a href="https://github.com/mitchellh/vagrant-aws/pull/26">このプルリク</a>を参考にした</p>

<p>で、<code>vagrant up</code>し直すと</p>
<div class="highlight"><pre><code class="text">[default] Rsyncing folder: /Users/chiastolite/workspace/vagrant/ec2/ =&gt; /vagrant
The following SSH command responded with a non-zero exit status.
Vagrant assumes that this means the command failed!

mkdir -p &#39;/vagrant&#39;
</code></pre></div>
<p>まだエラー…</p>

<p>でも<code>vagrant provison</code>し直すとエラーが起きない。<br>
多分、user_dataが設定される前にmkdirをしちゃっているのでエラーになってるんだと認識。<br>
ちょっと気になるけどこれでしかたないかな。</p>

<p>ついでにuser_data使えば↓こんな感じでchef clientを入れることも出来ることを確認。</p>
<div class="highlight"><pre><code class="text">Vagrant.configure(&quot;2&quot;) do |config|
  config.vm.box = &quot;dummy&quot;

  config.vm.provider :aws do |aws, override|
    # 中略

    aws.user_data = &lt;&lt;-USER_DATA
#!/bin/sh
curl -L https://www.opscode.com/chef/install.sh | bash
    USER_DATA
  end
end
</code></pre></div>
<p>これでEC2をvagrant経由で制御することが可能になった。<br>
インスタンスの立ち上げ、廃止、プロビジョニングが簡単なのはすごい捗るなぁ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vagrant + chef 勉強会を開催してきた]]></title>
    <link href="http://chiastolite.github.io/blog/2013/03/29/vag_chef/"/>
    <updated>2013-03-29T10:56:00+09:00</updated>
    <id>http://chiastolite.github.io/blog/2013/03/29/vag_chef</id>
    <content type="html"><![CDATA[<p>詳しくは↓</p>

<ul>
<li><a href="https://ishikitakai.com/events/43">vagrant + chef 勉強会 - vagrant + chef 勉強会</a></li>
<li><a href="http://togetter.com/li/479074">vagrant + chef 勉強会 - Togetter</a></li>
</ul>

<p>参加者の方のブログ</p>

<ul>
<li><a href="http://d.hatena.ne.jp/lncr_ct9a/20130328/1364488842">vagrant + chef 勉強会 を開催しました - 実はhokkai7go</a></li>
<li><a href="http://tk0miya.hatenablog.com/entry/2013/03/29/134614">vagrant + chef 勉強会に参加しながら、内職してた話。 - Hack like a rolling stone</a></li>
<li><a href="http://www.koemu.com/blog/2013/03/30/vag_chef/">vagrant + chef 勉強会へいってきた！ #vag_chef « こえむの編集後記</a></li>
</ul>

<p>会場は万葉さん。初めて伺いましたがアットホームな感じですてきな職場でした。</p>

<p>ちなみに開催してきたとか言ってるけど、@hokkai7goさん、@joker1007さんの話に乗っかった形で
主催者とか名乗るのはおこがましい(^^;</p>

<p>自己紹介をしてからはVagrant+Chefを使ってのセットアップとプロビジョニングとか、 もくもくと作業したり、気になる話題を話したり、すごい勉強になりました。<br>
最後は噂の<a href="https://github.com/pivotal/pivotal_workstation">pivotal/pivotal_workstation</a>を見て、みんなで大笑い。</p>

<h2>思ったこと</h2>

<h3>孤独のChef</h3>

<p>みなさんの共通の悩みっぽいのが職場でのChef/Vagrant仲間がいない(少ないこと)<br>
興味をもってくれる人はいるけど、そこまで踏み込んでくれる人がいない…</p>

<blockquote>
<p>一人でやってるとなかなか学習進まない→なかなか現場に導入できない→人増えない→最初に戻る</p>
</blockquote>

<p>こんな感じになりそうなので打開したいところですね</p>

<h3>(主に)コミュニティのcookbookが使われてた</h3>

<p>なんとなく自前のcookbook作って育ててる感じなのかなぁと思っていたんですが、コミュニティのcookbookを使ってるという話が多かった。<br>
あんまりコミュのほうは調べてなかったので、使いそうなのは追っていこうと思いました。</p>

<p>rbenvとかは↓この人のがいいかもとのこと。</p>

<p><a href="https://github.com/fnichol">fnichol (Fletcher Nichol)</a></p>

<h3>その他</h3>

<p>@shimizukawaさんとRedmineに関して話をできたり、@tk0miyaさんのroundsmanの話を聞いたり、@joker1007さんたちとBerkshelfの話をしたり。<br>
あと今回のイベントはishikitakai.comに立てられてたんだけど、「ishikitakai」「ishikitakai」って口に出すたび笑いが起きて、不思議と意識高くなってくるような気がするのでオススメです</p>

<h2>最後に</h2>

<p>発起人の@hokkai7goさん、@joker1007さん、ありがとうございました!<br>
ぜひ次回もやりましょう!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chefの勉強会に行ってきた]]></title>
    <link href="http://chiastolite.github.io/blog/2013/02/23/chef-for-beginners/"/>
    <updated>2013-02-23T15:04:00+09:00</updated>
    <id>http://chiastolite.github.io/blog/2013/02/23/chef-for-beginners</id>
    <content type="html"><![CDATA[<p>naoyaさんのブログだったり、AmazonのOpsWorksだったりで最近Chef熱が上がって来てるとこに素敵な勉強会が開催されるということで行ってきた。</p>

<p>イベント内容に関してはUstやTogetterで空気を掴んでいただければ。</p>

<ul>
<li><a href="http://kokucheese.com/event/index/74459/">2月22日 初めてのChefの教室(東京都)</a></li>
<li><a href="http://togetter.com/li/460798">初めてのChefの教室へのツイート - Togetter</a></li>
<li><a href="http://www.ustream.tv/channel/eytokyo-chef#utm_campaign=togetter.com&amp;utm_source=13442338&amp;utm_medium=social">USTREAM: eytokyo-chef: . Web</a></li>
</ul>

<h1>気になったトピックとか</h1>

<h2>Chef11での変更に関して</h2>

<p>Ruby -&gt; Erlangになってたのは聞いていたがその他にも変更がいろいろあったらしい。</p>

<ul>
<li>Private Chefのライセンス形態が永久からサブスクリプションへ</li>
<li>サーバもクライアントもインストールが簡単になったらしい</li>
</ul>

<p><a href="http://www.opscode.com/chef/install/">Install Chef | Opscode</a></p>

<p>インストールが楽になった(ぽい)というのはかなり嬉しいニュース。
Chef Serverはセットアップが辛い辛いとよく言われていたが、11では2行のコマンドで実行できるとかなんとか。ミドルウェア周りで必要な手順はないのかな?
ほんとに2行で出来るなら本当にうれしい</p>

<h2>Vagrantが当たり前になってきそう</h2>

<p>以前@ryuzeeさんのセッションを聞いてから使うようになったVagrant。
ThoughtWorksのTechnology Radarでの位置付けもドンドン上がってるし、これはブレイクするかな。</p>

<p>ということで自分が思うVagrantが便利だなと思うところ</p>

<ul>
<li>Chefのレシピの検証

<ul>
<li>スナップショットプラグイン(sahara)を使ってロールバックがしやすい</li>
</ul></li>
<li>開発メンバー間での環境の統一できる

<ul>
<li>特に開発機のOSが統一されてない時は必須</li>
</ul></li>
<li>開発環境と公開環境の統一

<ul>
<li>Vagrant+Chefのレシピで(理論上)同じ環境で開発ができるので、不要なトラブルが発生しない</li>
</ul></li>
</ul>

<h2>AWS OpsWorksおもしろそう</h2>

<p>内部の仕組みでちょっと気になるとこあるけど(既存インスタンスへのレシピの反映とか、インスタンス生成タイミングの違いによる構成の差が出ないかとか)WebでぽちぽちしてAutoScaleとか、起動時間の設定とかできるのはいいなぁと思った。
SSHも出来てブラックボックスにもならないし、これも要調査</p>

<h2>その他</h2>

<p>発表が一通り終わってからnaoyaさんにVagrantのboxは何を使ってますか?と聞いてきた。
(↓ここにあるのを使ってるとのこと)</p>

<p><a href="http://www.vagrantbox.es/">A list of base boxes for Vagrant - Vagrantbox.es</a></p>

<p>そこで話になったのが<strong>理想はAmazonLinuxのイメージ使えること</strong>。
自分もAMIをVirtualBoxで使えないか調べていたので、考えてることは間違ってなかったみたい。</p>

<p>その点で言うとEngine Yard Localはすごいいいと思う。
昨日ここの話聞けばよかったなぁ。</p>

<p><a href="http://www.engineyard.co.jp/products/local">ローカル クラウド コンピューティング: Engine Yard Cloud でローカル クラウド環境を作成</a></p>

<h1>最後に</h1>

<p>こんなおもしろい勉強会を開催・会場を提供してくださったEngine Yardのみなさま、発表者のみなさまありがとうございました。</p>

<p>会場にはアプリ/インフラの有名人がいたりして、Chefはどちらのポジションにいても重要になってきてるんだなぁというのが印象的でした。
今年はしっかり使いこなせるように頑張ろうと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[env_http_proxy.gem をリリースしました]]></title>
    <link href="http://chiastolite.github.io/blog/2013/02/12/env-http-proxy-gem/"/>
    <updated>2013-02-12T10:40:00+09:00</updated>
    <id>http://chiastolite.github.io/blog/2013/02/12/env-http-proxy-gem</id>
    <content type="html"><![CDATA[<p><a href="https://rubygems.org/gems/env_http_proxy">env<em>http</em>proxy | RubyGems.org | your community gem host</a><br>
<a href="https://github.com/chiastolite/env_http_proxy">chiastolite/env<em>http</em>proxy · GitHub</a></p>

<p>簡単に言うと「環境変数にhttp_proxyが設定されていた場合、Net::HTTP.newが呼ばれた際にはそのプロキシを利用するように強制するライブラリ」です。</p>

<p>会社ではプロキシを設定しないと外に出れないのですが、そのせいでプロキシを考慮してないプログラムが動かなくストレスフルな生活をしていました。これで平穏な日常に戻れる気がします。</p>

<h2>Padrinoで使ってみる</h2>

<p>Padrinoでプロキシ対応してないのはプラグインリストの表示</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>bundle <span class="nb">exec </span>padrino gem plugin -l
</span><span class='line'>
</span><span class='line'>/Users/chiastolite/.rbenv/versions/1.9.3-p385/lib/ruby/1.9.1/net/http.rb:762:in <span class="sb">`</span>initialize<span class="err">&#39;</span>: Operation timed out - connect<span class="o">(</span>2<span class="o">)</span> <span class="o">(</span>Errno::ETIMEDOUT<span class="o">)</span>
</span><span class='line'><span class="o">(</span>略<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>Gemfileに以下の行を追加してbundle installを実行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;env_http_proxy&#39;</span><span class="p">,</span> <span class="ss">group</span><span class="p">:</span> <span class="s1">&#39;development&#39;</span>
</span></code></pre></td></tr></table></div></figure>

<p>環境変数 http_proxyを設定</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">export </span><span class="nv">http_proxy</span><span class="o">=</span>http://proxy.example.com:8080/
</span></code></pre></td></tr></table></div></figure>

<p>再度プラグインリストの表示を行います</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>bundle <span class="nb">exec </span>padrino gem plugin -l
</span><span class='line'>
</span><span class='line'>Available plugins:
</span><span class='line'>  - <span class="o">[</span><span class="s2">&quot;960&quot;</span><span class="o">]</span>
</span><span class='line'>  - <span class="o">[</span><span class="s2">&quot;access&quot;</span><span class="o">]</span>
</span><span class='line'>  - <span class="o">[</span><span class="s2">&quot;ar_permalink_i18n&quot;</span><span class="o">]</span>
</span><span class='line'>  - <span class="o">[</span><span class="s2">&quot;ar_permalink&quot;</span><span class="o">]</span>
</span><span class='line'>  - <span class="o">[</span><span class="s2">&quot;ar_textile&quot;</span><span class="o">]</span>
</span><span class='line'>  - <span class="o">[</span><span class="s2">&quot;ar_translate&quot;</span><span class="o">]</span>
</span><span class='line'>  - <span class="o">[</span><span class="s2">&quot;auto_locale&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="o">(</span>以下略<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure> 

<p>動いてますね<br>
プロキシが対応していないライブラリ/プロダクトってのは結構多く、毎回PullRequest出すのも大変なのでとりあえずこれでしのげればいいなと思います</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rbenv-default-gemsを試してみた]]></title>
    <link href="http://chiastolite.github.io/blog/2013/02/08/try-rbenv-default-gems/"/>
    <updated>2013-02-08T10:25:00+09:00</updated>
    <id>http://chiastolite.github.io/blog/2013/02/08/try-rbenv-default-gems</id>
    <content type="html"><![CDATA[<p>会社に行くと毎朝必ずbrew updateをしてるのですが、rbenv-default-gemsというFormulaが追加されてるのに気づきました。</p>

<p><a href="https://github.com/sstephenson/rbenv-default-gems">sstephenson/rbenv-default-gems · GitHub</a></p>

<p>作者はrbenvのsstephenson<br>
ruby-buildを実行した際に指定したgemを同時に入れてくれるプラグインのようです</p>

<p>さっそく試してみます</p>

<p>READMEを参考に ~/.rbenv/default-gems に以下のような内容を書きます</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundler
</span><span class='line'>pry</span></code></pre></td></tr></table></div></figure>

<p>あとはいつも通りrbenv installをするだけ</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ CONFIGURE_OPTS="--with-readline-dir=/usr/local --with-openssl-dir=/usr/local --enable-shared" rbenv install 1.9.3-p385
</span><span class='line'>
</span><span class='line'>Downloading yaml-0.1.4.tar.gz...
</span><span class='line'>-&gt; http://dqw8nmjcqpjn7.cloudfront.net/36c852831d02cf90508c29852361d01b
</span><span class='line'>Installing yaml-0.1.4...
</span><span class='line'>Installed yaml-0.1.4 to /Users/morita/.rbenv/versions/1.9.3-p385
</span><span class='line'>
</span><span class='line'>Downloading ruby-1.9.3-p385.tar.gz...
</span><span class='line'>-&gt; http://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.3-p385.tar.gz
</span><span class='line'>Installing ruby-1.9.3-p385...
</span><span class='line'>Installed ruby-1.9.3-p385 to /Users/morita/.rbenv/versions/1.9.3-p385
</span><span class='line'>
</span><span class='line'>Fetching: bundler-1.2.3.gem (100%)
</span><span class='line'>Successfully installed bundler-1.2.3
</span><span class='line'>1 gem installed
</span><span class='line'>Fetching: coderay-1.0.8.gem (100%)
</span><span class='line'>Fetching: slop-3.4.3.gem (100%)
</span><span class='line'>Fetching: method_source-0.8.1.gem (100%)
</span><span class='line'>Fetching: pry-0.9.11.4.gem (100%)
</span><span class='line'>Successfully installed coderay-1.0.8
</span><span class='line'>Successfully installed slop-3.4.3
</span><span class='line'>Successfully installed method_source-0.8.1
</span><span class='line'>Successfully installed pry-0.9.11.4
</span><span class='line'>4 gems installed</span></code></pre></td></tr></table></div></figure>

<p>おぉ入ってる入ってる<br>
毎回 gem install bundlerやるのも面倒だなと思っていたので、これはいい拡張ですね</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「「コードゴルフに挑戦！ in 東京Ruby会議10」に挑戦してみた」にさらに挑戦してみた]]></title>
    <link href="http://chiastolite.github.io/blog/2013/01/16/ruby-codegolf/"/>
    <updated>2013-01-16T21:26:00+09:00</updated>
    <id>http://chiastolite.github.io/blog/2013/01/16/ruby-codegolf</id>
    <content type="html"><![CDATA[<p><a href="http://chiastolite.github.com/blog/2013/01/14/ruby-codegolf/">先日のエントリ</a>、最終結果を見たら78バイトは13位だった。</p>

<p>なんかくやしかったからShibuya.rbでもくもくしてみた</p>

<p>元のはこれ</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">eval</span><span class="p">(</span><span class="s1">&#39;%d.upto(%d){|x|puts (&quot;FizzBuzz &quot;[n=x**4%%-15,n+13]||x.to_s).strip}&#39;</span><span class="o">%</span><span class="vg">$*</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>FizzBuzz判定のロジックは@mametterさんの<a href="http://www.slideshare.net/mametter/ruby-2012">このスライド</a>を読んだときに知ったものだったが、行末の空白のためにバイト数を使ってしまっている<br>
ここは判定にバイト数を使ってもいいかもしれないと3項演算子やらを使ってみた</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">eval</span><span class="p">(</span><span class="s1">&#39;%d.upto(%d){|x|puts &quot;FizzBuzz&quot;[n=(z=x**4%%-15)&lt;0?z+1:z,n+12]||x}&#39;</span><span class="o">%</span><span class="vg">$*</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>2バイトの削減に成功</p>

<p>@tyabeさんに「スペース無ければシンボルに出来るのに…」と言われていたのでそれを試してみる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">eval</span><span class="p">(</span><span class="s1">&#39;%d.upto(%d){|x|puts :FizzBuzz[n=(z=x**4%%-15)&lt;0?z+1:z,n+12]||x}&#39;</span><span class="o">%</span><span class="vg">$*</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>1バイトの削減に成功</p>

<p>そういえばevalにつけてるカッコはいらないのでは?と試してみた</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">eval</span><span class="s1">&#39;%d.upto(%d){|x|puts :FizzBuzz[n=(z=x**4%%-15)&lt;0?z+1:z,n+12]||x}&#39;</span><span class="o">%</span><span class="vg">$*</span>
</span></code></pre></td></tr></table></div></figure>

<p>動いた!! 2バイトの削減に成功</p>

<p>もしかしたらputsの前のスペースもいらない?と試してみた</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">eval</span><span class="s1">&#39;%d.upto(%d){|x|puts:FizzBuzz[n=(z=x**4%%-15)&lt;0?z+1:z,n+12]||x}&#39;</span><span class="o">%</span><span class="vg">$*</span>
</span></code></pre></td></tr></table></div></figure>

<p>動いた!!!! 1バイトの削減に成功</p>

<p>これで72バイト!!<br>
今のロジック的にはここが限界かなぁ…?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[東京Ruby会議10に参加してきた]]></title>
    <link href="http://chiastolite.github.io/blog/2013/01/15/tkrk10/"/>
    <updated>2013-01-15T00:00:00+09:00</updated>
    <id>http://chiastolite.github.io/blog/2013/01/15/tkrk10</id>
    <content type="html"><![CDATA[<p>会場は千葉市美浜文化ホール<br>
最寄りが検見川浜というとで移動時間片道2時間オーバー…</p>

<p>カっとなってホテル取った!しかも前泊!!<br>
(聞いた感じホテル取った人ほとんどいなかった。みんな都会人だな)</p>

<p>発表内容に関してはすでにいろんな方が上げてるようなので割愛。  </p>

<p>個人的には前からお話を聞きたいと思っていたcookpadの井原(@ihara2525)さん、永和の田垣(@akiinyo)さんのを一緒に聞けたのが嬉しかった<br>
(井原さんは札幌Ruby会議、田垣さんはオブラブ収穫祭のスライド等々を見て気になってた)  </p>

<hr>

<p>運営のほうを見ると、いろんなコミュニティを運営している人がいるからか、すごい気配りが効いていたなぁと思う。</p>

<p>ノベルティのバッチを使ってみたり、アンチぼっち(ランチ|ディナー)を開催してみたり。<br>
正直アンチぼっち(ランチ|ディナー)が無ければぼっち飯確定だった人はいるはず(オレ、オレだよ!!)<br>
ああいう場で発表聞くだけだともったいないし、感じた熱を周りの人と共有するという意味でもすごいいい取り組みだった気がする。  </p>

<p>そして、2日目の雪による影響を考えての英断。<br>
運営側としては苦渋の決断だったろうなぁと思うのですが、各種路線の状況を見るとあれが無ければ家に帰れなかったかもしれなかったので、ほんとに感謝しています。  </p>

<hr>

<p>今月末には事後懇親会(通称:Q)が控えている。<br>
また楽しい時間を過ごせるといいなぁ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「コードゴルフに挑戦！ in 東京Ruby会議10」に挑戦してみた]]></title>
    <link href="http://chiastolite.github.io/blog/2013/01/14/ruby-codegolf/"/>
    <updated>2013-01-14T20:06:00+09:00</updated>
    <id>http://chiastolite.github.io/blog/2013/01/14/ruby-codegolf</id>
    <content type="html"><![CDATA[<p>東京Ruby会議10にて~~ささたつ~~くろたつさんからCodeIQでのコードゴルフの告知があった</p>

<p><a href="https://codeiq.jp/ace/sasata299/q161">挑戦者求む！【Ruby】コードゴルフに挑戦！ by 東京Ruby会議10 佐々木 達也│CodeIQ</a></p>

<p>コードゴルフとは<strong>特定の動作をするプログラムのソースコードを、可能な限り短いバイト数で記述するプログラミング・コンテスト</strong>(by Wikipedia)だそうだ</p>

<p>今回は問題がFizzBuzzだったので、前に<a href="http://www.slideshare.net/chiastolite/reading-selfdescriptivefizzbuzz">とあるQuineを読んだとき</a>に知ったロジックを使って書いてみた</p>

<div><script src='https://gist.github.com/4529523.js'></script>
<noscript><pre><code>eval('%d.upto(%d){|x|puts (&quot;FizzBuzz &quot;[n=x**4%%-15,n+13]||x.to_s).strip}'%$*)</code></pre></noscript></div>

<p>wcで測ってみたら78バイトだったのでまぁまぁかなーと思ってたら、どうもトップは65とからしい。さて、どこを削ったらいいものやら</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zshを導入してみる]]></title>
    <link href="http://chiastolite.github.io/blog/2013/01/02/zsh/"/>
    <updated>2013-01-02T01:26:00+09:00</updated>
    <id>http://chiastolite.github.io/blog/2013/01/02/zsh</id>
    <content type="html"><![CDATA[<p>正月ということで前から気になっていたzshを試してみることにした  </p>

<h1>zshのインストール</h1>

<p>メイン環境はMacなのでhomebrewで入れることに<br>
とりあえずinfoを見てみる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>brew info zsh
</span></code></pre></td></tr></table></div></figure>
<div class="highlight"><pre><code class="text">If you have administrator privileges, you must fix an Apple miss
configuration in Mac OS X 10.7 Lion by renaming /etc/zshenv to
/etc/zprofile, or Zsh will have the wrong PATH when executed
non-interactively by scripts.

Alternatively, install Zsh with /etc disabled:

  brew install --disable-etcdir zsh
</code></pre></div>
<p>よくわからないけどLionの/etc/zshenvは設定がおかしいらしいから/etc/zprofileにリネームしろみたいな?<br>
もしくは/etcを見ないようにオプションをつけろって感じだろうか</p>

<p>あんまシステム側のファイルに手を出したくないので今回は後者を試してみる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>brew install --disable-etcdir zsh
</span></code></pre></td></tr></table></div></figure>

<p>zshが起動できることを確認したので次は設定に</p>

<h1>antigenを入れてみる</h1>

<p><a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a>といういろいろ設定をしてくれるツールがあるらしいのだが
ちょっと過剰な気もしたので、@glidenote さんのブログを元に<a href="https://github.com/zsh-users/antigen">antigen</a>を試してみることに</p>

<p>参考元ではgit cloneをしていたが、自分は設定ファイルはgithubで一括管理したいので今回はsubmoduleを使って入れてみる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">cd</span> <span class="nv">$HOME</span>/dotfiles <span class="c"># 自分の設定ファイルがいろいろ入ってるとこ</span>
</span><span class='line'>mkdir -p <span class="nv">$HOME</span>/dotfiles/zsh
</span><span class='line'>git submodule add https://github.com/zsh-users/antigen.git zsh/antigen
</span></code></pre></td></tr></table></div></figure>

<h2>設定ファイルを追加</h2>

<h3>.zshrc</h3>

<p>@glidenoteさんの設定方法を参考に antigenの設定ファイルは分離することに</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">source</span> ~/dotfiles/zsh/antigenrc
</span></code></pre></td></tr></table></div></figure>

<h3>~/dotfiles/zsh/antigenrc</h3>

<p>antigenの設定ファイルを作る</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">source</span> ~/dotfiles/zsh/antigen/antigen.zsh
</span><span class='line'>
</span><span class='line'>antigen-lib
</span><span class='line'>
</span><span class='line'>antigen-bundle git
</span><span class='line'>antigen-bundle autojump
</span><span class='line'>antigen-bundle ruby
</span><span class='line'>antigen-bundle rbenv
</span><span class='line'>antigen-bundle bundler
</span><span class='line'>
</span><span class='line'>antigen-bundle zsh-users/zsh-syntax-highlighting
</span><span class='line'>
</span><span class='line'>antigen-theme gallois
</span><span class='line'>
</span><span class='line'>antigen-apply
</span></code></pre></td></tr></table></div></figure>

<p>zshを起動してみるとgit cloneとかが走って、プラグインが有効になったzshが起動した<br>
細かい設定は後々詰めるとして今日のところはこの辺で終了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Githugをやってみたついでに問題を意訳してみた その2]]></title>
    <link href="http://chiastolite.github.io/blog/2012/06/25/githug-ja-2/"/>
    <updated>2012-06-25T01:14:00+09:00</updated>
    <id>http://chiastolite.github.io/blog/2012/06/25/githug-ja-2</id>
    <content type="html"><![CDATA[<p>引き続きgithugの超意訳の続きです  </p>

<h3>8. There are some files in this repository, one of the files is untracked, which file is it?</h3>

<p>このディレクトリ内のいくつのファイルはリポジトリに登録されています。1つだけ登録されていないファイルはどれでしょうか</p>

<h3>9. A file has been removed from the working tree, however the file was not removed from the repository.  Find out what this file was and remove it.</h3>

<p>あるファイルはワーキングツリーからは削除されていますがリポジトリからは消されていません<br>
あるファイルを見つけてリポジトリからも削除してください</p>

<h3>10. A file (deleteme.rb) has accidentally been added to your staging area, find out which file and remove it from the staging area.  <em>NOTE</em> Do not remove the file system, only from git.</h3>

<p>deleteme.rb が間違ってステージングエリアに登録されてしまいました。ステージングエリアから削除してください<br>
注! 実ファイルは消さないでください。gitからだけ消してください。</p>

<h3>11. We have a file called oldfile.txt. We want to rename it to newfile.txt and stage this change.</h3>

<p>oldfile.txtというファイルをnewfile.txtにリネームしてステージングエリアに登録してください</p>

<h3>12. You will be asked for the first 7 chars of the hash of most recent commit.  You will need to investigate the logs of the repository for this.</h3>

<p>よくコミットのハッシュ値(7文字)を聞かれることがあります。リポジトリから最新のコミットのハッシュ値(7文字)を調べてください</p>

<h3>13. We have a git repo and we want to tag the current commit with new_tag.</h3>

<p>リポジトリの最新コミットにnew_tagという名前でタグをつけてください</p>

<h3>14. The README file has been committed, but it looks like the file <code>forgotten_file.rb</code> was missing from the commit.  Add the file and amend your previous commit to include it.</h3>

<p>現在READMEというファイルがコミットされていますが一緒にforgotten<em>file.rbをコミットするのを忘れてしまいました<br>
forgotten</em>file.rbをREADMEファイルと同じコミットに入れてください。</p>

<h3>15. There are two files to be committed.  The goal was to add each file as a separate commit, however both were added by accident.  Unstage the file <code>to_commit_second</code> using the reset command (don&#39;t commit anything)</h3>

<p>これからコミットしようとしているファイルが2つあります。 別のコミットにしたいのですが、間違って一緒にaddを行ってしまいました<br>
to<em>commit</em>second ファイルをresetコマンドを使ってステージングから削除してください<br>
(コミットを行う必要はありません)</p>

<h3>16. A file has been modified, but you don&#39;t want to keep the files.  Checkout the <code>config.rb</code> file from the last commit.</h3>

<p>あるファイルに変更を加えたのですがどうもこの変更は不要になったようです。config.rbを最後のコミットの状態に戻してください。</p>

<h3>17. This projects has a remote repository.  Identify it.</h3>

<p>このプロジェクトにはリモートリポジトリが存在します。その名前を答えてください。</p>

<h3>18. The remote repositories have a url associated to them.  Please enter the url of remote_location</h3>

<p>リモートリポジトリにはURLが関連付けられています。リモートリポジトリremote_locationのURLを答えてください。</p>

<h3>19. You need to pull changes from your origin repository.</h3>

<p>origin リポジトリの変更を取り込んでください</p>

<h3>20. Add a remote repository called <code>origin</code> with the url <code>https://github.com/githug/githug</code></h3>

<p>リモートリポジトリ origin を登録してください。 URLは https://github.com/githug/githug になります</p>

<h3>21. There have been modifications to the app.rb file since your last commit.  Find out which line has changed.</h3>

<p>app.rbには最後のコミットからの変更があります。どの行が変更されたか行番号を答えてください</p>

<h3>22. Someone has put a password inside the file &#39;config.rb&#39; find out who it was</h3>

<p>config.rbにパスワードを書いてしまった人がいるようです。その人はだれでしょうか?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[スクラムの始め方]]></title>
    <link href="http://chiastolite.github.io/blog/2012/06/21/starting-scrum/"/>
    <updated>2012-06-21T01:54:00+09:00</updated>
    <id>http://chiastolite.github.io/blog/2012/06/21/starting-scrum</id>
    <content type="html"><![CDATA[<p>先日参加したshibuya.rbにて、なぜかスクラム開発導入に関しての話になったので、
ここ数ヶ月勉強してScrum Bootcampにも参加して、現時点での&quot;スクラムを始めるのに必要だと思うこと&quot;をまとめてみる  </p>

<p>というか自分はこうやって始めようという内容です<br>
ツッコミいただけると幸い  </p>

<h2>スクラムを始めようと思わない</h2>

<p>いきなり矛盾してるようだが、スクラムを始めようと考えるのは目的と手段が違うんじゃないかな?という意味で。<br>
スクラムのここに魅力を感じてとか、こういう効果を期待してとか目的があってスクラムを導入するべきかなと。  </p>

<p>また、スクラムを始める!というのが至上命題になってたりすると、内容がわからないメンバーには
やらされ感もつきまとうと思うので価値とか考えを理解してもらった上で導入するのがいいのではないかな。  </p>

<h2>早めに成功体験を積み上げよう</h2>

<p>新しいことを始めてるので、最初のうちはイテレーションを回すのが大変だと思う。<br>
その時点で目標を高くかかげすぎると目標達成できなくてテンションが下がる。<br>
こうならない為に目標を低めに設定するといいと思う。<br>
10の成果を達成できるチームなら8を目標にしておいたほうが、12を目標にしてたときより成功体験をつめるという意味でもいいし、「ほらみたことか次はもっとやれるぜ」みたいな前向きな空気作れるんじゃないかな。  </p>

<h2>一度に全部やらない</h2>

<p>一概にスクラムをやるといってもやること一杯ですよね<br>
スクラムのプラクティスやら、XPのプラクティスやら…<br>
いきなり全部とか考えないでチームメンバーが必要だと思うものからやるのがいいのかな<br>
メンバーが納得できてないプラクティスを導入してもやらされ感だけ感じるんじゃないかと不安を抱いています<br>
もちろんメンバーのモチベーションが高いならば全部やってみたいです  </p>

<p>こんな感じかなと思ってます</p>

<h2>最後に</h2>

<p>自分はスクラムによってもたらされるものの1つ悩みの排除があるという持論をもっています</p>

<ul>
<li>作業の優先順位</li>
<li>先が見えないスケジュール</li>
<li>未知の部分の仕様策定</li>
</ul>

<p>そういう(無駄な)悩みから開放され、本当に悩むべきところに集中できるのではないかなぁ<br>
次組むチームで早く試したいもんです  </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Githugをやってみたついでに問題を意訳してみた]]></title>
    <link href="http://chiastolite.github.io/blog/2012/06/20/githug-ja/"/>
    <updated>2012-06-20T02:33:00+09:00</updated>
    <id>http://chiastolite.github.io/blog/2012/06/20/githug-ja</id>
    <content type="html"><![CDATA[<p>@HIROCASTERさんのブログにてこんなエントリーが
<a href="http://hiroki.jp/2012/06/19/4423/">「githug」でgitの基本操作を算数ドリルみたいに学ぼう！</a></p>

<p>Githugという練習プログラムがあるようです</p>

<p><a href="https://github.com/Gazler/githug">Gazler/githug</a></p>

<p>とりあえず一通りやってみました<br>
(導入方法は@HIROCASTERさんのブログを参照してください)<br>
Levelは全部で35まであるみたいですね<br>
githubのほう見たらローカライズのブランチはあるようなのですが、まだ日本語の情報もなさそうなので<br>
問題文を超意訳してみましたので、参考にしてみてください  </p>

<h3>1 . Initialize an empty repository</h3>

<p>空のリポジトリを作成してください</p>

<h3>2 . There is a file in your folder called README, you should add it to your staging area</h3>

<p>READMEファイルをステージング領域に追加してください</p>

<h3>3 .  The README file has been added to your staging area, now commit it.</h3>

<p>ステージングエリアにあるREADMEをコミットしてください</p>

<h3>4 . Set up your git name and email, this is important so that your commits can be identified</h3>

<p>gitで使うユーザー名とメールアドレスを設定してください(コミットした人を判別するのに必要になります)</p>

<h3>5 . Clone the repository at https://github.com/Gazler/cloneme</h3>

<p>https://github.com/Gazler/cloneme をクローンしてください</p>

<h3>6 . Clone the repository at https://github.com/Gazler/cloneme to &#39;my<em>cloned</em>repo&#39;</h3>

<p>https://github.com/Gazler/cloneme をmy<em>cloned</em>repoという名前でクローンしてください</p>

<h3>7 . The text editor &#39;vim&#39; creates files ending in .swp (swap files) for all files that are currently open.  We don&#39;t want them creeping into the repository.  Make this repository ignore .swp files.</h3>

<p>vimは&#39;ほげほげ.swp&#39;のようなファイルを作ることがありますが、このようなファイルがリポジトリに入らないようにしてください</p>

<p>続きは後日!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[トラブル☆しゅーたーず #02に行ってきた]]></title>
    <link href="http://chiastolite.github.io/blog/2012/06/05/trable_shooters/"/>
    <updated>2012-06-05T22:10:00+09:00</updated>
    <id>http://chiastolite.github.io/blog/2012/06/05/trable_shooters</id>
    <content type="html"><![CDATA[<p><a href="http://www.zusaar.com/event/296005">トラブル☆しゅーたーず＃02　～あいつがまたやらかした～ on Zusaar</a>に参加してきました</p>

<p>リンク先にもありますが要は発生した障害に対して</p>

<ol>
<li>障害を復旧させ</li>
<li>原因を追求し</li>
<li>報告書/提案書を作成</li>
</ol>

<p>というイベントです</p>

<p>……せっかくのお休みに嬉々として障害対応しに行くんだから<del>どうかんがえてもドMですほんとうにありが(ry</del>意識の高い参加者の方々でした</p>

<h2>概要</h2>

<p>運用を受託されているECサイトで障害発生<br>
18時にはテレビでサイトが放映されるため、それまでに解決しなくてはならない  </p>

<p>タイムテーブル的にはこんな感じ</p>

<pre>
04:00 <del>あのやろう</del>山◯くんサイト更新作業完了
14:00 お客様より第一報
15:30 お客様へ一次報告
16:00 番宣番組放送
18:00 本放送
</pre>

<p>詳細は<a href="http://t.co/DIkEmqof">こんな</a></p>

<p>…今見ても胃がキリキリする(&#8211;;</p>

<p>結果としては、アプリは復旧できたがECCUBEの管理部は復旧できず<br>
負荷対策も…といった感じ<br>
それでも中間順位は2位ぐらいにつけていたので優勝までもう一歩だったかな?<br>
自分は主にアプリの修正等々をやってましたが、DBを調査してくれた方の情報と合わせてなんとかアプリ復旧までこぎつけたのはよかったなと思います  </p>

<p>最後には各チームでお客様へ向かって障害報告・再発防止案などを説明する謝罪タイム<br>
だから休日なのになんでこんな悲しいお話聞いてるんだろう、自分たち…</p>

<h2>お客様(@tmaeさん)よりのお説教タイム</h2>

<p>マジお通夜状態<br>
リアルでこんなんなったら泣きます…</p>

<p>@tmaeさんのお話を聞いて思ったこと等々</p>

<h3>もっとお客さんの立場を考えるべき</h3>

<p>15:30に一次報告をと言われて結局大抵のチームはギリギリかオーバーしてしまっていた<br>
大抵のチームがある程度復旧への道筋を立ててから説明しようとしてこんなことになったんだろうけど、あくまでそれはこちらの論理なんだよね<br>
お客さんの立場からすれば何が起きているのか、どういう対応をしているのかを知りたいはずなのでまずは状況の説明だけでも構わないので一次報告は迅速にすべきだなぁ</p>

<h3>なにを最優先すべきなのか</h3>

<p>目の前に壊れてるものがあるとどうしても最優先で直したくなっちゃうけど、それがお客様の望んでいることなのかは場合による(今回は自転車の画像を引くのが最優先だった)ので、頭のどこかに置いておかないといけないよな</p>

<h2>馬場さん(@netmarkjp)の解説タイム</h2>

<p>まさか山◯くんがクラウド上にバックアップ取ってるとは‥
そこに気付ければ1時間は変わった気がする</p>

<p>バックアップが取れていれば既存のインスタンスを破棄して、更新作業を最初から遣り直すとかもできるのはクラウドのいいところ<br>
ここらへんはCROSS2012とかでも聞いていたけど、実際作業中は考えもしませんでした(汗<br>
まだまだクラウド脳にシフトしてないな</p>

<p>その後は懇親会で山◯くんどうなん?とかそもそもあの手順書(?)にOK出るのはどうなんだ等々、本当に障害対応後のような空気にw</p>

<p>インフラ系の勉強会ということで大丈夫かなぁ…と思いましたが楽しくいろんなことを学べた気がします<br>
次回もトラブル直しに来ようと思います</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef を使ってみる その1]]></title>
    <link href="http://chiastolite.github.io/blog/2012/05/21/using-chef-part1/"/>
    <updated>2012-05-21T00:35:00+09:00</updated>
    <id>http://chiastolite.github.io/blog/2012/05/21/using-chef-part1</id>
    <content type="html"><![CDATA[<p>先日のVagrantのエントリー内でちょっと触れたChefを試してみます</p>

<h2>Chefとは</h2>

<p><a href="http://wiki.opscode.com/display/chef/Home">Chef</a><br>
<a href="http://jp.rubyist.net/magazine/?0035-ChefInDECOLOG">Chef でサーバ管理を楽チンにしよう！|るびま</a></p>

<p>Rubyで作られたサーバの構成管理ツールです<br>
いろんなサーバにapacheとか入れたり設定ファイルも配置しちゃったりできるようです  </p>

<p>これで下記みたいな時に幸せになれるのかもしれません</p>

<ul>
<li>特定のサーバだけ設定がもれてて動かなかった!</li>
<li>あのサーバだけライブラリのバージョン違うじゃねぇか!!</li>
<li>100台サーバあるけど、apacheのバージョン更新しといて</li>
</ul>

<p>ただ、ChefにはServerやらClientやらNodeやらRoleやらいろんな考えがあって、<br>
最初から完璧にやろうと思うと必ず失敗します。<br>
自分もすでに数回目(笑)</p>

<p>今回はVagrantで使うことを目的としていますので、chef-soloだけで試そうと思います<br>
最終的には開発用のVirtualBoxと公開用サーバでアプリとか設定とかを統一していきたいです</p>

<h2>インストール</h2>

<p>Rubyは入っているという想定です</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install chef</span></code></pre></td></tr></table></div></figure>

<p>これだけでOk</p>

<h2>Chefに関する設定ファイルを作成</h2>

<p>下記のコマンドを実行して設定ファイルを作成します</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ knife configure</span></code></pre></td></tr></table></div></figure>

<p>設定ファイルの置き場所とかが聞かれると思うので $HOME/.chef/ にしてみましょう<br>
ファイルの設定が終わったら、~/.chef/knife.rbにcookbookの保管場所を設定します</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cookbook_path</span>            <span class="s1">&#39;~/.chef/cookbooks/&#39;</span>
</span></code></pre></td></tr></table></div></figure>

<h2>レシピ作成</h2>

<p>…ここではレシピと言うべきなのかクックブックと言うべきなのか<br>
インストールするもの毎に作るのが慣習ぽいです<br>
apacheならapacheだけ。PHPとかでライブラリを入れる場合は一緒でもいいのかな?</p>

<p>今回は単に静的ファイルを1つ置くだけのレシピを書いてみましょう</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">knife</span> <span class="n">cookbook</span> <span class="n">create</span> <span class="n">static_file</span>
</span></code></pre></td></tr></table></div></figure>

<p>cookbook<em>path以下にstatic</em>fileというディレクトリが出来ているはずです<br>
ここがstatic_fileレシピに関する情報をまとめるディレクトリになります</p>

<h3>レシピディレクトリの中身</h3>

<ul>
<li>attributes<br></li>
<li>definitions<br></li>
<li>files<br></li>
<li>libraries<br></li>
<li>providers<br></li>
<li>recipes</li>
<li>resources</li>
<li>templates</li>
</ul>

<p>8つのディレクトリと</p>

<ul>
<li>metadata.rb<br></li>
<li>README.md<br></li>
</ul>

<p>2つのファイルがあります  </p>

<p>今回は静的ファイルを置くだけなので、recipesとfilesディレクトリ以外は消しておきます</p>

<h3>ファイルを置いてみる</h3>

<p>ファイルの扱いに関しては<a href="http://wiki.opscode.com/display/chef/Resources#Resources-CookbookFile">ここ</a>を参考にしています</p>

<p>ファイルを置くのは簡単で</p>

<ol>
<li>files以下に置きたいファイルを置く</li>
<li>recipes/default.rbに cookbook_file メソッドでファイルを指定</li>
</ol>

<p>といった感じです。</p>

<p>実際にやってみます<br>
files 以下にsample.txtを作る<br>
recipes/default.rb に以下のようにファイルを配置したいパスを指定</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cookbook_file</span> <span class="s1">&#39;/tmp/sample.txt&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">mode</span> <span class="s1">&#39;0644&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>これでレシピの作成は完了<br>
ではこのレシピをVagrantで利用してみましょう<br>
Vagrantfileの途中にchef-soloの記述があるのでその部分を以下のように変更します</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Vagrant</span><span class="o">::</span><span class="no">Config</span><span class="o">.</span><span class="n">run</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 中略</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="ss">:chef_solo</span> <span class="k">do</span> <span class="o">|</span><span class="n">chef</span><span class="o">|</span>
</span><span class='line'>    <span class="n">chef</span><span class="o">.</span><span class="n">cookbooks_path</span> <span class="o">=</span> <span class="s2">&quot;~/.chef/cookbooks&quot;</span>
</span><span class='line'>    <span class="n">chef</span><span class="o">.</span><span class="n">add_recipe</span> <span class="s2">&quot;static_file&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>あとはVagrantから仮想マシンを立ちげれば反映されてるはずです  </p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">vagrant</span> <span class="n">up</span>     <span class="c1"># すでに起動済みの場合はvagrant reload</span>
</span></code></pre></td></tr></table></div></figure>

<p>その後以下のコマンドでファイルがあるかを確認してみましょう</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">vagrant</span> <span class="n">ssh</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span> <span class="n">ls</span> <span class="sr">/tmp/s</span><span class="n">ample</span><span class="o">.</span><span class="n">txt</span>
</span></code></pre></td></tr></table></div></figure>

<p>ファイルはちゃんと配置されたでしょうか?<br>
まだここだと嬉しさわからないと思うので次回はテンプレートを使って値の書き換え等を行うのを確認したいと思います</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrantを利用する理由]]></title>
    <link href="http://chiastolite.github.io/blog/2012/05/18/benefits-of-using-vagrant/"/>
    <updated>2012-05-18T02:14:00+09:00</updated>
    <id>http://chiastolite.github.io/blog/2012/05/18/benefits-of-using-vagrant</id>
    <content type="html"><![CDATA[<p>昨日のエントリーに対する補足として、なぜVagrantを利用するのかということを考える<br>
結論から言うとVagrantが素晴しい!!ということよりも、仮想マシンを使った開発 + Chef/Puppetでの
構成管理それぞれがメリットを持っていて、Vagrantによってそのメリットが享受しやすいことなのかな。</p>

<h2>メリット</h2>

<h3>母艦となるPC/OSの環境が汚れない</h3>

<p>必要なライブラリを入れていたら母艦の調子が悪くなるというありがちなパターンから脱却できる</p>

<h3>開発メンバーが共通の環境で作業が行える</h3>

<p>母艦のOSやスペックが異なろうと仮想マシンは統一されているのでトラブル調査が簡単</p>

<h3>ステージング/本番と(ほぼ)同じ構成で作業ができる</h3>

<p>Chef/Puppet等の設定を共有することでほぼ同じ構成を行える<br>
なので、いざデプロイしたら本番/ステージングで動かない!といったことが減る</p>

<h3>特定の時点での環境が再現可能</h3>

<p>仮想マシンの生成+構成管理スクリプトをバージョン管理に入れることで<br>
特定の時点でのOS/アプリの構成がほぼ完全に再現が可能</p>

<h2>デメリット</h2>

<h3>メモリを大量に使う</h3>

<p>仮想マシンだからしかたがない</p>

<h3>ネットワークが遅い</h3>

<p>仮想マシンだからしかたがない</p>

<h3>設定ファイルを書くのが大変</h3>

<p>我慢してください</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VagrantとVeeweeを使ってみた]]></title>
    <link href="http://chiastolite.github.io/blog/2012/05/16/vagrant_and_veewee/"/>
    <updated>2012-05-16T19:15:00+09:00</updated>
    <id>http://chiastolite.github.io/blog/2012/05/16/vagrant_and_veewee</id>
    <content type="html"><![CDATA[<p>渋谷.rb[:20120516] で飛び込みLTした内容のフォローです</p>

<p>最近こんなエントリーが上がってました</p>

<p><a href="http://daipresents.com/2012/2012%E5%B9%B4%E3%81%AE%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB%E5%8B%95%E5%90%91%E3%82%82%E3%82%8F%E3%81%8B%E3%82%8B%EF%BC%81technology-radar%E3%81%8C%E5%85%AC%E9%96%8B%E3%81%95%E3%82%8C%E3%81%A6/">2012年のアジャイル動向もわかる！Technology Radarが公開されていました|世界</a>
<a href="http://www.thoughtworks.com/radar">ThoughtWorks</a></p>

<p>正式版が出たVagrantの順位が上がってますね<br>
ということで試してみましょう</p>

<h2>Vagrantとは</h2>

<p>VirtualBoxの仮想マシンをコマンドラインから作ってくれるRubyのライブラリです  </p>

<h3>Vagrantの流れ</h3>

<ol>
<li>Boxと呼ばれる仮想マシンの雛形を用意する</li>
<li>ChefやらPuppetで必要なアプリのインストールや設定ファイルを配置する</li>
<li>(ﾟДﾟ)ｳﾏｰ</li>
</ol>

<h3>実際にやってみる</h3>

<p>ちなみに Ruby は入ってる前提です<br>
まずはgemを入れましょう</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install vagrant</span></code></pre></td></tr></table></div></figure>

<p>終わったら使用するboxを選びます<br>
http://vagrantbox.es/ から適当なのを選んでみましょう<br>
ここでは<strong>当然</strong> Gentooを選びました</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 指定したURLのBoxをgentooという名前で使えるようにダウンロードしてきます
</span><span class='line'>vagrant box add gentoo http://dl.dropbox.com/u/4270274/gentoo64-0.7.box
</span><span class='line'># 雛形となるboxを指定します
</span><span class='line'>vagrant init gentoo</span></code></pre></td></tr></table></div></figure>

<p>この時点でカレントフォルダにVagrantfileができます<br>
Vagrantfileにはネットワークの設定だったりChef/Puppetの設定を記述できます<br>
設定し終わったら仮想マシンを立ち上げます</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant up</span></code></pre></td></tr></table></div></figure>

<p>あとはvagrant sshなどで中にはいってゴリゴリ開発が可能です</p>

<h3>ただし…</h3>

<p>この時点ではBoxには何が入ってるかよくわかりません<br>
出来ればプレーンなBoxを作りたいですよね<br>
ということでBoxを作るためのgem, <strong>veewee</strong> を使ってみましょう</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># gemのインストール
</span><span class='line'>gem install veewee --pre</span></code></pre></td></tr></table></div></figure>

<p>ここでは開発版のgemを入れてみます  </p>

<p>テンプレートからBoxを作ります<br>
使用できるテンプレートの一覧はこれで確認できます</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># テンプレートの表示
</span><span class='line'>veewee vbox templates</span></code></pre></td></tr></table></div></figure>

<p>いろいろ出ます<br>
もちろんここではGentooじゃなくてUbuntuとかもっとナチュラルなやつを選びます</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Box作成用のテンプレートを選択
</span><span class='line'>veewee vbox define 'ubuntu1204' 'ubuntu-12.04-server-amd64'
</span><span class='line'>
</span><span class='line'># Box作成用仮想マシンの作成(ISO等のダウンロードもします)
</span><span class='line'>veewee vbox build 'ubuntu1204'
</span><span class='line'>
</span><span class='line'># vagrant用にアウトプット
</span><span class='line'>vagrant basebox export 'ubuntu1204'
</span><span class='line'>
</span><span class='line'># vagrantで使えるように
</span><span class='line'>vagrant box add 'ubuntu1204' ubuntu1204.box</span></code></pre></td></tr></table></div></figure>

<p>ここまで来たら vagrant init から仮想マシンを作ればオッケーです</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[スマホサイトを作ったときの話]]></title>
    <link href="http://chiastolite.github.io/blog/2012/05/15/create-smartphone-site/"/>
    <updated>2012-05-15T00:00:00+09:00</updated>
    <id>http://chiastolite.github.io/blog/2012/05/15/create-smartphone-site</id>
    <content type="html"><![CDATA[<p>ここ数ヶ月関わっていた、Javaで書かれてたスマホサイトをRubyで書きなおしたときの話<br>
社内のWikiに書いたら外にも書けよと言われたのでブログ再開がてら書いてみる</p>

<h2>元の問題</h2>

<ul>
<li>他のプロジェクトのフォークである<br>

<ul>
<li>あっちで更新があるたびマージとか無いわ…<br></li>
</ul></li>
<li>テストが無い…<br>

<ul>
<li>悲しいぐらいに無い<br></li>
</ul></li>
<li>デプロイは手動<br>

<ul>
<li>死ねる……<br></li>
</ul></li>
</ul>

<p>こんな状況だったので、こりゃ作り直したほうが早いわ…と思い<br>
チーム内では技術の選定とかは意見通しやすかったのでRubyでやってみよう<br>
ということになった。というかした。  </p>

<h2>フロント</h2>

<p>ではアプリケーション作成に使うフレームワークはどうするか?<br>
ぱっと以下の3つが思い浮ぶ  </p>

<ul>
<li>Rails</li>
<li>Sinatra</li>
<li>Padrino</li>
</ul>

<p>Ruby未経験者がいて教育コストかけてられないのでRailsは即却下</p>

<p>結論から言うとSinatraを採用した。<br>
Padrinoと迷ったが自分が使ったことのあるもののほうがいいだろという理由から。<br>
ただ、後から考えるとPadrinoのほうがよかったかもしれない<br>
(ジェネレータもあるし、Controllerの分割等が容易なため)  </p>

<p>ViewはスマホだしHTML5。slimとか使いたかったけど教えるの大変なのでerbで記述することにした</p>

<ul>
<li>jQuery</li>
<li>jQueryUI</li>
</ul>

<p>スマホのUIを構築するということで当然JavaScriptは必須。<br>
この用途だとサイズが大きいかもだがjQueryがデファクトスタンダードであろうということで採用<br>
UI系での処理を行うためにjQueryUIも導入  </p>

<p>jQuery MobileはHTML作成のルール(クラス付け)だったりが大変&amp;自分が理解してないのを教えれないということで見送り<br>
jqMobiというのもちょうど正式版が出てはいたがこれも検証等々してる余裕はなかったので見送り  </p>

<h2>O/Rマッパー</h2>

<ul>
<li>DataMapper</li>
</ul>

<p>ActiveRecordとどちらを使うか迷ったが、既存テーブルの利用に関して処理の流れがわかりやすかったので採用</p>

<p>ただ、値の更新時に自動で更新日付等を入れる処理を実装するのに苦労した<br>
(最終的には既存のメソッドに手を加えることで対応)<br>
あとauto<em>migrateってメソッドはRailsとかでdb:migrateとかしたことある人には危険すぎる…<br>
(値を消してmigrateしなおし。値が残るのはauto</em>upgrade)  </p>

<h2>テスト</h2>

<ul>
<li>RSpec</li>
<li>RR</li>
<li>Capybara</li>
<li>(Capybara-webkit)</li>
</ul>

<p>テストフレームワークはいろいろなものがあるが、今回はRSpecを導入<br>
WebのAPIとの通信等のテストを記述する場所にはRRも用いる<br>
Web系のテストはCapybaraで記述。<br>
JavaScriptが必要なものに関してはCapybara-webkitを使おうと思っていた(headlessテストができるため)けど<br>
周りが使えそうもないので見送り  </p>

<h2>デプロイ</h2>

<ul>
<li>Capistrano</li>
<li>Capistrano-ext</li>
</ul>

<p>Ruby製のデプロイツール<br>
Railsでの使用を想定して作られたが他のツールでも利用可能<br>
Capistrano-extを使えばStaging環境と本番環境とか複数環境に適用できるのに魅力を感じ採用  </p>

<h2>CI</h2>

<ul>
<li>Jenkins</li>
</ul>

<p>言わずと知れたCIツール<br>
今回のプロジェクトではリポジトリ(svn)をポーリングして、<br>
変更があればユニットテスト、インテグレーションテストを行い、<br>
問題がなければステージング環境に自動デプロイを行う環境を構築した  </p>

<p>細かい設定等々は後日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[世界最小プラグイン]]></title>
    <link href="http://chiastolite.github.io/blog/2012/01/22/simplest-redmine-plugin/"/>
    <updated>2012-01-22T01:59:00+09:00</updated>
    <id>http://chiastolite.github.io/blog/2012/01/22/simplest-redmine-plugin</id>
    <content type="html"><![CDATA[<p>Redmineを導入した際に頻繁に質問されるものの1つが下記のような内容だと思います</p>

<ul>
<li>チケットのタイトル編集したいんだけどどこでやればいいの?</li>
</ul>

<p>この長年多くのユーザー・管理者を悩ませていた問題を解決するプラグイン開発しました!!!  </p>

<h2>スクリーンショット</h2>

<h3>これが</h3>

<p><img src="http://chiastolite.github.io/images/2012/01/simplest-redmine-plugin-before.png" alt=" 導入前 "></p>

<h3>こうなります</h3>

<p><img src="http://chiastolite.github.io/images/2012/01/simplest-redmine-plugin-after.png" alt=" 導入後 "></p>

<h2>驚きの中身解説</h2>

<ol>
<li>locales/ja.ymlのlabel_moreを上書きする</li>
</ol>

<p>以上(え</p>

<p>リポジトリはこちらから<br>
<a href="https://github.com/chiastolite/redmine_how_to_modify_the_subject">https://github.com/chiastolite/redmine_how_to_modify_the_subject</a></p>
]]></content>
  </entry>
  
</feed>
